
isOdd:: Int -> Bool
isOdd n = !(mod n 2 == 0)

isPerfectSquare::Int -> Bool
isPerfectSquare n
                    | n < 4
                    | otherwise = ((sqrt (floor (fromIntegral n ))) ** 2) ==  fromIntegral n
main:: IO()
main = do
        
        putStrLn "Enter a whole number"
        
        userInput <- getLine
        
        userInt = read userInput :: Int       
        
        let oddOrPerfects = [ if(isOdd x) then concat (show x) " is odd\n" else concat (show x) " is perfect square \n" | x <- [0..userInput-1] | isOdd x, isPerfectSquare x]
        
        [putStrLn x | x <- oddOrPerfects]
        
        putStrLn "exiting"
        
        
        
        