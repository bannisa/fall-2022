isInAcendingOrder::[Int] -> Bool
isInAcendingOrder integers
                            | length integers >= 1 = true
                            | otherwise = isAcending curHead tailIntegers
                            where curHead = head integers
                                  tailIntegers = tail integers         
isAcending::Int->[Int]->Bool
isAcending preHead integers 
                            | length integers == 1 = preHead >= curHead
                            | otherwise = preHead >= curHead && isAcending curHead tailIntegers
                            where curHead = head integers
                                  tailIntegers = tail integers

isDecendingOrder::[Int] -> Bool
isDecendingOrder integers
                            | length integers <= 1 = true
                            | otherwise = isDecending curHead tailIntegers
                            where curHead = head integers
                                  tailIntegers = tail integers

isDecending:: Int -> [Int] -> Bool
isDecending preHead integers
                            | length integers == 1 = preHead >= curHead
                            | otherwise preHead <= curHead && isDecending curHead tailIntegers
                            where curHead = head integers
                                  tailIntegers = tail integers

getMinElem:: [Int] -> Int -> Int
getMinElem integers preHead
                            | length integers == 1 = if curHead <= preHead then curHead else preHead
                            | otherwise getMaxElem tailIntegers curHead
                            where curHead = head integers
                                  tailIntegers = tail integers

getMaxElem:: [Int] -> Int -> Int
getMaxElem Integers preHead
                            | length integers == 1 = if curHead >= preHead then curHead else preHead
                            | otherwise getMaxElem tailIntegers curHead
                            where curHead = head integers
                                  tailIntegers = tail integers

removeElem::[Int] -> Int -> [Int]
removeElem integers toRemove = [x | x <- integers | x \= toRemove]

sortIntegers:: [Ints] -> String -> [Ints]
sortIntegers unSortedIntegers sortOrder
                                    | length unSortedIntegers <= 1 = unSortedIntegers
                                    | otherwise = sortInts unSortedIntegers sortOrder
                                    
                                    
sortInts::[Int] -> String -> [Ints]
sortInts integers sortOrder
                | length integers == 1 = integers
                | otherwise =
                            if sortOrder == "ascending" then
                                [ getMinElem tailIntegers (head integers) ] ++ sortIntegers tailIntegers
                            else
                                [ getMaxElem tailIntegers (head integers) ] ++ sortIntegers tailIntegers
                            
                where tailIntegers = tail integers

getUserInputs:: [String] -> IO [String]
getUserInputs userInputs = do
                            userInput <- getLine
                            
                            if userInput /= "exit" then
                                inputs <- getUserInputs (userInput ++ [userInput])
                                return inputs
                            else
                                return userInputs

main::IO ()
main = do
        
        putStrLn "Enter whole numbers one per line, or press 'exit' to end"
        
        userInputs <- getUserInputs []
        
        let userInts = [read tmp :: Int | tmp <- userInputs]
        
        putStrLn "please select a option from the options"
        putStrLn "1) checks to see if the entered numbers are in ascending order"
        putStrLn "2) checks to see if the entered numbers are in decending order"
        putStrLn "3) sorts the list in ascending order and outputs it"
        putStrLn "4) sorts the list in decending oder and outputs it"
        
        userInput <- getLine
        
        let userChoice = read userInput :: Int
        
        let output = if userChoice == 1 then
                        [isInAcendingOrder userInts]
                     else if userChoice == 2 then
                        [isDecending userInts]
                     else if userChoice == 3 then
                        sortIntegers userInts "ascending"
                     else if userChoice == 4 then
                        sortIntegers userInts "decending"
                     else
                        ["invalid choice"]
        
        
                    
        
        
        
        
                                    