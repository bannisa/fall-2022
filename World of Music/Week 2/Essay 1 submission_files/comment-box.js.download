var $j = jQuery.noConflict();
var commentBox = {
                  
  onLightboxButtonClick : function( event, textareaId, title, lightboxUrl )
  {
    Event.stop( event );

    // To display correctly the contextmenu, we need to scroll this lightbox to the top of the page.
    window.scrollTo( 0, 0 );
    $j( "body" ).addClass( "add-content-dialog-disable-scroll" );
    
    var textarea = $(textareaId);
    
    textarea.value = commentBox.getVtbe( textareaId ).innerHTML;

    commentBox.lightBox( textarea.value, title, lightboxUrl, "commentBox.onLightboxSubmit", textarea.id, false );
  },

  onLightboxSubmit : function( content, textareaId )
  {
    // update both hidden textarea and vtbe editor
    commentBox.getVtbe( textareaId ).innerHTML = content;
    $(textareaId).value = content;
    
    attemptGrading.pageMonitor.getInstance().onInputChange( textareaId );
  },
  
  /*
   * This function is added as handler for lightBox's onClose inside lightBox() function. It is called in both cases,
   * whether the lightBox is submitted (after onLightboxSubmit()) or cancelled.
   */
  onLightboxClose : function( )
  {
    // restore previous editors that were overwritten while opening a new lightBox
    commentBox.restoreEditors();
    $j( "body" ).removeClass( "add-content-dialog-disable-scroll" );
  },
  
  getVtbe : function( textareaId )
  {
    var vtbeIframe = $( textareaId + '_ifr' );
    if ( vtbeIframe )
    {
      return vtbeIframe.contentDocument.getElementById( 'tinymce' );
    }
  },

  updateTextareas : function( clearTextareaChange )
  {
    $$('table.textboxtable textarea').each( function( textarea )
    {
      var  vtbeEditor = tinyMceWrapper.getEditor( textarea.id );
      if ( vtbeEditor )
      {
        if ( clearTextareaChange )
        {
          attemptGrading.pageMonitor.getInstance().clearInputChange( textarea.id );
        }
        textarea.value = vtbeEditor.getTinyMceEditor().getContent();
      }
    });
  },
  
  isDirty : function( textareaId )
  {
    if ( editors )
    {
      var editor = editors[ textareaId ];
      if ( editor && editor._tinyMceEditor )
      {
        return editor._tinyMceEditor.isDirty();
      }
    }
    
    return false;
  },
  
  /*
   * Save the tinymce / tinyMCE values, which are overwritten when opening a new lightBox, to be restored after closing the lightBox
   * by calling restoreEditors().
   */
  saveEditors : function()
  {
    origTinymce = tinymce;
    origTinyMCE = tinyMCE;
  },
  
  /*
   * Restore tinymce / tinyMCE variables to their state prior to opening a new lightBox, as saved in saveEditors(). Should be called
   * on closing the lightBox.
   */
  restoreEditors : function()
  {
    tinymce = origTinymce;
    tinyMCE = origTinyMCE;
  },

  /*
   * (see LRN-101590) Simply opening a new lightBox creates a new editor and in the process it "loses" all the current editors by overwriting
   * the tinymce / tinyMCE global variables. When that lightBox is closed it does not restore the original editors to the state that they were
   * in when the lightBox was opened. Therefore, this function explicitly saves the editors by calling saveEditors() before opening a new lightBox
   * and restores the editors by calling restoreEditors() through onLightboxClose() at the end.
   *
   */
  lightBox : function( content, title, vtbeLightboxUrl, callback, callbackParams, reuseLightbox )
  {
    var openLightBox = ( reuseLightbox === null || reuseLightbox === false ); //Do not reuse the lightbox
    
    //If we need to openLightbox, if the current lightbox is not found and editor with contenttext not found we need to open the lightbox
    if ( openLightBox || lightbox.getCurrentLightbox() === null  )
    {
      // save editors that are about to be overwritten while opening a new lightBox
      commentBox.saveEditors();
      
      var lightboxParam =
      {
          defaultDimensions :
          {
              w : 1000,
              h : 300
          },
          ajax :
          {
              url : vtbeLightboxUrl,
              method : 'post',
              asyn : false,
              params :
              {
                content : content,
                callback : callback,
                callbackParams : Object.toJSON( callbackParams ),
                isSpellcheckOnly : false,
                reuseLightbox : !openLightBox
              },
              loadExternalScripts : true
          },
          title : title,
          closeOnBodyClick : false,
          showCloseLink : false,
          contents : content,
          useDefaultDimensionsAsMinimumSize : true,
          onClose : commentBox.onLightboxClose		// on close, restore previous editors that were overwritten while opening a new lightBox
      };
      var lightboxInstance = new lightbox.Lightbox( lightboxParam );
      lightboxInstance.open();
      return false;
    }
    else
    {
      lightbox.getCurrentLightbox().show();
      return true;
    }
  }
                
};
